
#include <GLTools.h>    // OpenGL toolkit
#include <GLMatrixStack.h>
#include <GLFrame.h>
#include <GLFrustum.h>
#include <GLGeometryTransform.h>
#include "CSCIx229.h"
#include <math.h>

#ifdef __APPLE__
#include <glut/glut.h>
#else
#define FREEGLUT_STATIC
#include <GL/glut.h>
#include <GL/freeglut_ext.h>
#endif
#include <GL/glut.h>
//#include <GL/freeglut_ext.h>
#ifdef linux
#include <cstdlib> 
#endif


GLFrame             viewFrame;
GLFrustum           viewFrustum;
GLMatrixStack       modelViewMatrix;
GLMatrixStack       projectionMatrix;
GLGeometryTransform transformPipeline;

GLuint  grassShader;      // The perspective demonstration shader
GLint   locMVP;                 // The location of the ModelViewProjection matrix uniform 

M3DVector3f vOrigin;
   
GLuint  length_texture;         //
GLuint  orientation_texture;
GLuint  grasspalette_texture;
GLuint  grasscolor_texture;
GLuint  bend_texture;
int field = 128;
float glen = 0.8;
double previousTime,fps;
int frameCount;
GLuint  vao1,vao2;                    // The VAO
GLuint  vertexBuffer;           // Geometry VBO
GLuint  vertexData;		// VBO data
// Mouse
bool mouseleftdown = false;   // True if mouse LEFT button is down.
                              // Saved by mouse.
float mousex, mousey;           // Mouse x,y coords, in GLUT format (pixels from upper-left corner).
GLdouble projection[16];
GLdouble modelview[16];
GLint viewport[4];  
M3DVector3f mpos ; 
int h,w;      
int obj;         
float len = 1;
/*  Lorenz Parameters  */
double s  = 20;
double b  = 2.6666;
double r  = 78;
float path[3];
float movex,movey;
double x = 1;
double y = 1;
double z = 1;
double dt = 0.001 ;
int X  = 0;
const unsigned char grasspalette_data[]  =
{
    0x5E, 0x5F, 0x15, 0x5E, 0x5F, 0x14, 0x5E, 0x5F,
    0x14, 0x5E, 0x5F, 0x14, 0x5E, 0x5F, 0x14, 0x5E,
    0x5F, 0x14, 0x5E, 0x5F, 0x14, 0x5E, 0x5F, 0x14,
    0x5F, 0x5F, 0x14, 0x5F, 0x60, 0x14, 0x5F, 0x60,
    0x14, 0x5F, 0x60, 0x14, 0x5F, 0x60, 0x14, 0x5F,
    0x60, 0x13, 0x5F, 0x60, 0x13, 0x5F, 0x60, 0x13,
    0x60, 0x60, 0x13, 0x60, 0x61, 0x13, 0x60, 0x61,
    0x13, 0x60, 0x61, 0x13, 0x60, 0x61, 0x13, 0x60,
    0x61, 0x13, 0x60, 0x61, 0x13, 0x60, 0x61, 0x13,
    0x61, 0x61, 0x13, 0x61, 0x62, 0x12, 0x61, 0x62,
    0x12, 0x61, 0x62, 0x12, 0x61, 0x62, 0x12, 0x61,
    0x62, 0x12, 0x61, 0x62, 0x12, 0x62, 0x62, 0x12,
    0x62, 0x62, 0x12, 0x62, 0x63, 0x12, 0x62, 0x63,
    0x12, 0x62, 0x63, 0x12, 0x62, 0x63, 0x12, 0x62,
    0x63, 0x11, 0x62, 0x63, 0x11, 0x63, 0x63, 0x11,
    0x63, 0x63, 0x11, 0x63, 0x64, 0x11, 0x63, 0x64,
    0x11, 0x63, 0x64, 0x11, 0x63, 0x64, 0x11, 0x63,
    0x64, 0x11, 0x63, 0x64, 0x11, 0x64, 0x64, 0x11,
    0x64, 0x64, 0x11, 0x64, 0x64, 0x10, 0x64, 0x65,
    0x10, 0x64, 0x65, 0x10, 0x64, 0x65, 0x10, 0x64,
    0x65, 0x10, 0x65, 0x65, 0x10, 0x65, 0x65, 0x10,
    0x65, 0x65, 0x10, 0x65, 0x65, 0x10, 0x65, 0x66,
    0x10, 0x65, 0x66, 0x10, 0x65, 0x66, 0x10, 0x65,
    0x66, 0x0F, 0x66, 0x66, 0x0F, 0x66, 0x66, 0x0F,
    0x66, 0x66, 0x0F, 0x66, 0x66, 0x0F, 0x66, 0x67,
    0x0F, 0x66, 0x67, 0x0F, 0x66, 0x67, 0x0F, 0x66,
    0x67, 0x0F, 0x67, 0x67, 0x0F, 0x67, 0x67, 0x0F,
    0x67, 0x67, 0x0F, 0x67, 0x67, 0x0E, 0x67, 0x68,
    0x0E, 0x67, 0x68, 0x0E, 0x67, 0x68, 0x0E, 0x67,
    0x68, 0x0E, 0x68, 0x68, 0x0E, 0x68, 0x68, 0x0E,
    0x68, 0x68, 0x0E, 0x68, 0x68, 0x0E, 0x68, 0x69,
    0x0E, 0x68, 0x69, 0x0E, 0x68, 0x69, 0x0E, 0x69,
    0x69, 0x0D, 0x69, 0x69, 0x0D, 0x69, 0x69, 0x0D,
    0x69, 0x69, 0x0D, 0x69, 0x69, 0x0D, 0x69, 0x69,
    0x0D, 0x69, 0x6A, 0x0D, 0x69, 0x6A, 0x0D, 0x6A,
    0x6A, 0x0D, 0x6A, 0x6A, 0x0D, 0x6A, 0x6A, 0x0D,
    0x6A, 0x6A, 0x0D, 0x6A, 0x6A, 0x0C, 0x6A, 0x6A,
    0x0C, 0x6A, 0x6B, 0x0C, 0x6A, 0x6B, 0x0C, 0x6B,
    0x6B, 0x0C, 0x6B, 0x6B, 0x0C, 0x6B, 0x6B, 0x0C,
    0x6B, 0x6B, 0x0C, 0x6B, 0x6B, 0x0C, 0x6B, 0x6B,
    0x0C, 0x6B, 0x6C, 0x0C, 0x6C, 0x6C, 0x0C, 0x6C,
    0x6C, 0x0B, 0x6C, 0x6C, 0x0B, 0x6C, 0x6C, 0x0B,
    0x6C, 0x6C, 0x0B, 0x6C, 0x6C, 0x0B, 0x6C, 0x6C,
    0x0B, 0x6C, 0x6D, 0x0B, 0x6D, 0x6D, 0x0B, 0x6D,
    0x6D, 0x0B, 0x6D, 0x6D, 0x0B, 0x6D, 0x6D, 0x0B,
    0x6D, 0x6D, 0x0B, 0x6D, 0x6D, 0x0A, 0x6D, 0x6D,
    0x0A, 0x6D, 0x6E, 0x0A, 0x6E, 0x6E, 0x0A, 0x6E,
    0x6E, 0x0A, 0x6E, 0x6E, 0x0A, 0x6E, 0x6E, 0x0A,
    0x6E, 0x6E, 0x0A, 0x6E, 0x6E, 0x0A, 0x6E, 0x6E,
    0x0A, 0x6F, 0x6F, 0x0A, 0x6F, 0x6F, 0x0A, 0x6F,
    0x6F, 0x0A, 0x6F, 0x6F, 0x09, 0x6F, 0x6F, 0x09,
    0x6F, 0x6F, 0x09, 0x6F, 0x6F, 0x09, 0x6F, 0x6F,
    0x09, 0x6F, 0x6F, 0x09, 0x6F, 0x6F, 0x09, 0x70,
    0x70, 0x09, 0x70, 0x70, 0x09, 0x70, 0x70, 0x09,
    0x70, 0x70, 0x09, 0x70, 0x70, 0x09, 0x70, 0x70,
    0x09, 0x70, 0x70, 0x09, 0x70, 0x70, 0x08, 0x71,
    0x71, 0x08, 0x71, 0x71, 0x08, 0x71, 0x71, 0x08,
    0x71, 0x71, 0x08, 0x71, 0x71, 0x08, 0x71, 0x71,
    0x08, 0x71, 0x71, 0x08, 0x71, 0x71, 0x08, 0x71,
    0x71, 0x08, 0x72, 0x72, 0x08, 0x72, 0x72, 0x08,
    0x72, 0x72, 0x08, 0x72, 0x72, 0x08, 0x72, 0x72,
    0x07, 0x72, 0x72, 0x07, 0x72, 0x72, 0x07, 0x72,
    0x72, 0x07, 0x73, 0x73, 0x07, 0x73, 0x73, 0x07,
    0x73, 0x73, 0x07, 0x73, 0x73, 0x07, 0x73, 0x73,
    0x07, 0x73, 0x73, 0x07, 0x73, 0x73, 0x07, 0x73,
    0x73, 0x07, 0x74, 0x74, 0x07, 0x74, 0x74, 0x07,
    0x74, 0x74, 0x07, 0x74, 0x74, 0x06, 0x74, 0x74,
    0x06, 0x74, 0x74, 0x06, 0x74, 0x74, 0x06, 0x74,
    0x74, 0x06, 0x74, 0x74, 0x06, 0x75, 0x75, 0x06,
    0x75, 0x75, 0x06, 0x75, 0x75, 0x06, 0x75, 0x75,
    0x06, 0x75, 0x75, 0x06, 0x75, 0x75, 0x06, 0x75,
    0x75, 0x06, 0x75, 0x75, 0x06, 0x76, 0x76, 0x05,
    0x76, 0x76, 0x05, 0x76, 0x76, 0x05, 0x76, 0x76,
    0x05, 0x76, 0x76, 0x05, 0x76, 0x76, 0x05, 0x76,
    0x76, 0x05, 0x76, 0x76, 0x05, 0x77, 0x77, 0x05,
    0x77, 0x77, 0x05, 0x77, 0x77, 0x05, 0x77, 0x77,
    0x05, 0x77, 0x77, 0x05, 0x77, 0x77, 0x05, 0x77,
    0x77, 0x04, 0x77, 0x77, 0x04, 0x77, 0x77, 0x04,
    0x78, 0x78, 0x04, 0x78, 0x78, 0x04, 0x78, 0x78,
    0x04, 0x78, 0x78, 0x04, 0x78, 0x78, 0x04, 0x78,
    0x78, 0x04, 0x78, 0x78, 0x04, 0x78, 0x78, 0x04,
    0x79, 0x79, 0x04, 0x79, 0x79, 0x04, 0x79, 0x79,
    0x04, 0x79, 0x79, 0x04, 0x79, 0x79, 0x03, 0x79,
    0x79, 0x03, 0x79, 0x79, 0x03, 0x79, 0x79, 0x03,
    0x79, 0x79, 0x03, 0x7A, 0x7A, 0x03, 0x7A, 0x7A,
    0x03, 0x7A, 0x7A, 0x03, 0x7A, 0x7A, 0x03, 0x7A,
    0x7A, 0x03, 0x7A, 0x7A, 0x03, 0x7A, 0x7A, 0x03,
    0x7A, 0x7A, 0x03, 0x7B, 0x7B, 0x03, 0x7B, 0x7B,
    0x02, 0x7B, 0x7B, 0x02, 0x7B, 0x7B, 0x02, 0x7B,
    0x7B, 0x02, 0x7B, 0x7B, 0x02, 0x7B, 0x7B, 0x02,
    0x7B, 0x7B, 0x02, 0x7C, 0x7C, 0x02, 0x7C, 0x7C,
    0x02, 0x7C, 0x7C, 0x02, 0x7C, 0x7C, 0x02, 0x7C,
    0x7C, 0x02, 0x7C, 0x7C, 0x02, 0x7C, 0x7C, 0x02,
    0x7C, 0x7C, 0x01, 0x7C, 0x7C, 0x01, 0x7D, 0x7D,
    0x01, 0x7D, 0x7D, 0x01, 0x7D, 0x7D, 0x01, 0x7D,
    0x7D, 0x01, 0x7D, 0x7D, 0x01, 0x7D, 0x7D, 0x01,
    0x7D, 0x7D, 0x01, 0x7D, 0x7D, 0x01, 0x7E, 0x7E,
    0x01, 0x7E, 0x7E, 0x01, 0x7E, 0x7E, 0x01, 0x7E,
    0x7E, 0x01, 0x7E, 0x7E, 0x01, 0x7E, 0x7E, 0x00,
    0x7E, 0x7E, 0x00, 0x7E, 0x7E, 0x00, 0x7F, 0x7F,
    0x00, 0x7F, 0x7F, 0x00, 0x7F, 0x7F, 0x00, 0x7F,
    0x7F, 0x00, 0x7F, 0x7F, 0x00, 0x7F, 0x7F, 0x00,
    0x7F, 0x7F, 0x00, 0x7F, 0x7F, 0x00, 0x7F, 0x7F,
    0x00, 0x80, 0x80, 0x00, 0x7F, 0x80, 0x00, 0x7F,
    0x80, 0x00, 0x7F, 0x80, 0x00, 0x7E, 0x80, 0x00,
    0x7E, 0x80, 0x00, 0x7E, 0x80, 0x00, 0x7D, 0x80,
    0x00, 0x7D, 0x80, 0x00, 0x7D, 0x80, 0x00, 0x7C,
    0x80, 0x00, 0x7C, 0x80, 0x00, 0x7C, 0x80, 0x00,
    0x7B, 0x80, 0x00, 0x7B, 0x80, 0x00, 0x7B, 0x80,
    0x00, 0x7A, 0x80, 0x00, 0x7A, 0x80, 0x00, 0x7A,
    0x80, 0x00, 0x79, 0x80, 0x00, 0x79, 0x80, 0x00,
    0x79, 0x80, 0x00, 0x78, 0x80, 0x00, 0x78, 0x80,
    0x00, 0x78, 0x80, 0x00, 0x77, 0x80, 0x00, 0x77,
    0x80, 0x00, 0x77, 0x80, 0x00, 0x76, 0x80, 0x00,
    0x76, 0x80, 0x00, 0x76, 0x80, 0x00, 0x75, 0x80,
    0x00, 0x75, 0x80, 0x00, 0x75, 0x80, 0x00, 0x74,
    0x80, 0x00, 0x74, 0x80, 0x00, 0x74, 0x80, 0x00,
    0x74, 0x80, 0x00, 0x73, 0x80, 0x00, 0x73, 0x80,
    0x00, 0x73, 0x80, 0x00, 0x72, 0x80, 0x00, 0x72,
    0x80, 0x00, 0x72, 0x80, 0x00, 0x71, 0x80, 0x00,
    0x71, 0x80, 0x00, 0x71, 0x80, 0x00, 0x70, 0x80,
    0x00, 0x70, 0x80, 0x00, 0x70, 0x80, 0x00, 0x6F,
    0x80, 0x00, 0x6F, 0x80, 0x00, 0x6F, 0x80, 0x00,
    0x6E, 0x80, 0x00, 0x6E, 0x80, 0x00, 0x6E, 0x80,
    0x00, 0x6D, 0x80, 0x00, 0x6D, 0x80, 0x00, 0x6D,
    0x80, 0x00, 0x6C, 0x80, 0x00, 0x6C, 0x80, 0x00,
    0x6C, 0x80, 0x00, 0x6B, 0x80, 0x00, 0x6B, 0x80,
    0x00, 0x6B, 0x80, 0x00, 0x6A, 0x80, 0x00, 0x6A,
    0x80, 0x00, 0x6A, 0x80, 0x00, 0x69, 0x80, 0x00,
    0x69, 0x80, 0x00, 0x69, 0x80, 0x00, 0x68, 0x80,
    0x00, 0x68, 0x80, 0x00, 0x68, 0x80, 0x00, 0x67,
    0x80, 0x00, 0x67, 0x80, 0x00, 0x67, 0x80, 0x00,
    0x66, 0x80, 0x00, 0x66, 0x80, 0x00, 0x66, 0x80,
    0x00, 0x65, 0x80, 0x00, 0x65, 0x80, 0x00, 0x65,
    0x80, 0x00, 0x64, 0x80, 0x00, 0x64, 0x80, 0x00,
    0x64, 0x80, 0x00, 0x63, 0x80, 0x00, 0x63, 0x80,
    0x00, 0x63, 0x80, 0x00, 0x62, 0x80, 0x00, 0x62,
    0x80, 0x00, 0x62, 0x80, 0x00, 0x62, 0x80, 0x00,
    0x61, 0x80, 0x00, 0x61, 0x80, 0x00, 0x61, 0x80,
    0x00, 0x60, 0x80, 0x00, 0x60, 0x80, 0x00, 0x60,
    0x80, 0x00, 0x5F, 0x80, 0x00, 0x5F, 0x80, 0x00,
    0x5F, 0x80, 0x00, 0x5E, 0x80, 0x00, 0x5E, 0x80,
    0x00, 0x5E, 0x80, 0x00, 0x5D, 0x80, 0x00, 0x5D,
    0x80, 0x00, 0x5D, 0x80, 0x00, 0x5C, 0x80, 0x00,
    0x5C, 0x80, 0x00, 0x5C, 0x80, 0x00, 0x5B, 0x80,
    0x00, 0x5B, 0x80, 0x00, 0x5B, 0x80, 0x00, 0x5A,
    0x80, 0x00, 0x5A, 0x80, 0x00, 0x5A, 0x80, 0x00,
    0x59, 0x80, 0x00, 0x59, 0x80, 0x00, 0x59, 0x80,
    0x00, 0x58, 0x80, 0x00, 0x58, 0x80, 0x00, 0x58,
    0x80, 0x00, 0x57, 0x80, 0x00, 0x57, 0x80, 0x00,
    0x57, 0x80, 0x00, 0x56, 0x80, 0x00, 0x56, 0x80,
    0x00, 0x56, 0x80, 0x00, 0x55, 0x80, 0x00, 0x55,
    0x80, 0x00, 0x55, 0x80, 0x00, 0x54, 0x80, 0x00,
    0x54, 0x80, 0x00, 0x54, 0x80, 0x00, 0x53, 0x80,
    0x00, 0x53, 0x80, 0x00, 0x53, 0x80, 0x00, 0x52,
    0x80, 0x00, 0x52, 0x80, 0x00, 0x52, 0x80, 0x00,
    0x51, 0x80, 0x00, 0x51, 0x80, 0x00, 0x51, 0x80,
    0x00, 0x51, 0x80, 0x00, 0x50, 0x80, 0x00, 0x50,
    0x80, 0x00, 0x50, 0x80, 0x00, 0x4F, 0x80, 0x00,
    0x4F, 0x80, 0x00, 0x4F, 0x80, 0x00, 0x4E, 0x80,
    0x00, 0x4E, 0x80, 0x00, 0x4E, 0x80, 0x00, 0x4D,
    0x80, 0x00, 0x4D, 0x80, 0x00, 0x4D, 0x80, 0x00,
    0x4C, 0x80, 0x00, 0x4C, 0x80, 0x00, 0x4C, 0x80,
    0x00, 0x4B, 0x80, 0x00, 0x4B, 0x80, 0x00, 0x4B,
    0x80, 0x00, 0x4A, 0x80, 0x00, 0x4A, 0x80, 0x00,
    0x4A, 0x80, 0x00, 0x49, 0x80, 0x00, 0x49, 0x80,
    0x00, 0x49, 0x80, 0x00, 0x48, 0x80, 0x00, 0x48,
    0x80, 0x00, 0x48, 0x80, 0x00, 0x47, 0x80, 0x00,
    0x47, 0x80, 0x00, 0x47, 0x80, 0x00, 0x46, 0x80,
    0x00, 0x46, 0x80, 0x00, 0x46, 0x80, 0x00, 0x45,
    0x80, 0x00, 0x45, 0x80, 0x00, 0x45, 0x80, 0x00,
    0x44, 0x80, 0x00, 0x44, 0x80, 0x00, 0x44, 0x80,
    0x00, 0x43, 0x80, 0x00, 0x43, 0x80, 0x00, 0x43,
    0x80, 0x00, 0x42, 0x80, 0x00, 0x42, 0x80, 0x00,
    0x42, 0x80, 0x00, 0x41, 0x80, 0x00, 0x41, 0x80,
    0x00, 0x41, 0x80, 0x00, 0x40, 0x80, 0x00, 0x40,
    0x80, 0x00, 0x40, 0x80, 0x00, 0x40, 0x80, 0x00,
    0x3F, 0x80, 0x00, 0x3F, 0x80, 0x00, 0x3F, 0x80,
    0x00, 0x3E, 0x80, 0x00, 0x3E, 0x80, 0x00, 0x3E,
    0x80, 0x00, 0x3D, 0x80, 0x00, 0x3D, 0x80, 0x00,
    0x3D, 0x80, 0x00, 0x3C, 0x80, 0x00, 0x3C, 0x80,
    0x00, 0x3C, 0x80, 0x00, 0x3B, 0x80, 0x00, 0x3B,
    0x80, 0x00, 0x3B, 0x80, 0x00, 0x3A, 0x80, 0x00,
    0x3A, 0x80, 0x00, 0x3A, 0x80, 0x00, 0x39, 0x80,
    0x00, 0x39, 0x80, 0x00, 0x39, 0x80, 0x00, 0x38,
    0x80, 0x00, 0x38, 0x80, 0x00, 0x38, 0x80, 0x00,
    0x37, 0x80, 0x00, 0x37, 0x80, 0x00, 0x37, 0x80,
    0x00, 0x36, 0x80, 0x00, 0x36, 0x80, 0x00, 0x36,
    0x80, 0x00, 0x35, 0x80, 0x00, 0x35, 0x80, 0x00,
    0x35, 0x80, 0x00, 0x34, 0x80, 0x00, 0x34, 0x80,
    0x00, 0x34, 0x80, 0x00, 0x33, 0x80, 0x00, 0x33,
    0x80, 0x00, 0x33, 0x80, 0x00, 0x32, 0x80, 0x00,
    0x32, 0x80, 0x00, 0x32, 0x80, 0x00, 0x31, 0x80,
    0x00, 0x31, 0x80, 0x00, 0x31, 0x80, 0x00, 0x30,
    0x80, 0x00, 0x30, 0x80, 0x00, 0x30, 0x80, 0x00,
    0x2F, 0x80, 0x00, 0x2F, 0x80, 0x00, 0x2F, 0x80,
    0x00, 0x2E, 0x80, 0x00, 0x2E, 0x80, 0x00, 0x2E,
    0x80, 0x00, 0x2D, 0x80, 0x00, 0x2D, 0x80, 0x00,
    0x2D, 0x80, 0x00, 0x2C, 0x80, 0x00, 0x2C, 0x80,
    0x00, 0x2C, 0x80, 0x00, 0x2B, 0x80, 0x00, 0x2B,
    0x80, 0x00, 0x2B, 0x80, 0x00, 0x2A, 0x80, 0x00,
    0x2A, 0x80, 0x00, 0x2A, 0x80, 0x00, 0x29, 0x80,
    0x00, 0x29, 0x80, 0x00, 0x29, 0x80, 0x00, 0x28,
    0x80, 0x00, 0x28, 0x80, 0x00, 0x28, 0x80, 0x00,
    0x27, 0x80, 0x00, 0x27, 0x80, 0x00, 0x27, 0x80,
    0x00, 0x26, 0x80, 0x00, 0x26, 0x80, 0x00, 0x26,
    0x80, 0x00, 0x25, 0x80, 0x00, 0x25, 0x80, 0x00,
    0x25, 0x80, 0x00, 0x24, 0x80, 0x00, 0x24, 0x80,
    0x00, 0x24, 0x80, 0x00, 0x24, 0x80, 0x00, 0x23,
    0x80, 0x00, 0x23, 0x80, 0x00, 0x23, 0x80, 0x00,
    0x22, 0x80, 0x00, 0x22, 0x80, 0x00, 0x22, 0x80,
    0x00, 0x21, 0x80, 0x00, 0x21, 0x80, 0x00, 0x21,
    0x80, 0x00, 0x20, 0x80, 0x00, 0x20, 0x80, 0x00,
    0x20, 0x80, 0x00, 0x1F, 0x80, 0x00, 0x1F, 0x80,
    0x00, 0x1F, 0x80, 0x00, 0x1E, 0x80, 0x00, 0x1E,
    0x80, 0x00, 0x1E, 0x80, 0x00, 0x1D, 0x80, 0x00,
    0x1D, 0x80, 0x00, 0x1D, 0x80, 0x00, 0x1C, 0x80,
    0x00, 0x1C, 0x80, 0x00, 0x1C, 0x80, 0x00, 0x1B,
    0x80, 0x00, 0x1B, 0x80, 0x00, 0x1B, 0x80, 0x00,
    0x1A, 0x80, 0x00, 0x1A, 0x80, 0x00, 0x1A, 0x80,
    0x00, 0x19, 0x80, 0x00, 0x19, 0x80, 0x00, 0x19,
    0x80, 0x00, 0x18, 0x80, 0x00, 0x18, 0x80, 0x00,
    0x18, 0x80, 0x00, 0x17, 0x80, 0x00, 0x17, 0x80,
    0x00, 0x17, 0x80, 0x00, 0x16, 0x80, 0x00, 0x16,
    0x80, 0x00, 0x16, 0x80, 0x00, 0x15, 0x80, 0x00,
    0x15, 0x80, 0x00, 0x15, 0x80, 0x00, 0x14, 0x80,
    0x00, 0x14, 0x80, 0x00, 0x14, 0x80, 0x00, 0x13,
    0x80, 0x00, 0x13, 0x80, 0x00, 0x13, 0x80, 0x00,
    0x12, 0x80, 0x00, 0x12, 0x80, 0x00, 0x12, 0x80,
    0x00, 0x11, 0x80, 0x00, 0x11, 0x80, 0x00, 0x11,
    0x80, 0x00, 0x10, 0x80, 0x00, 0x10, 0x80, 0x00,
    0x10, 0x80, 0x00, 0x0F, 0x80, 0x00, 0x0F, 0x80,
    0x00, 0x0F, 0x80, 0x00, 0x0E, 0x80, 0x00, 0x0E,
    0x80, 0x00, 0x0E, 0x80, 0x00, 0x0D, 0x80, 0x00,
    0x0D, 0x80, 0x00, 0x0D, 0x80, 0x00, 0x0C, 0x80,
    0x00, 0x0C, 0x80, 0x00, 0x0C, 0x80, 0x00, 0x0B,
    0x80, 0x00, 0x0B, 0x80, 0x00, 0x0B, 0x80, 0x00,
    0x0A, 0x80, 0x00, 0x0A, 0x80, 0x00, 0x0A, 0x80,
    0x00, 0x09, 0x80, 0x00, 0x09, 0x80, 0x00, 0x09,
    0x80, 0x00, 0x09, 0x80, 0x00, 0x08, 0x80, 0x00,
    0x08, 0x80, 0x00, 0x08, 0x80, 0x00, 0x07, 0x80,
    0x00, 0x07, 0x80, 0x00, 0x07, 0x80, 0x00, 0x06,
    0x80, 0x00, 0x06, 0x80, 0x00, 0x06, 0x80, 0x00,
    0x05, 0x80, 0x00, 0x05, 0x80, 0x00, 0x05, 0x80,
    0x00, 0x04, 0x80, 0x00, 0x04, 0x80, 0x00, 0x04,
    0x80, 0x00, 0x03, 0x80, 0x00, 0x03, 0x80, 0x00,
    0x03, 0x80, 0x00, 0x02, 0x80, 0x00, 0x02, 0x80,
    0x00, 0x02, 0x80, 0x00, 0x01, 0x80, 0x00, 0x01,
    0x80, 0x00, 0x01, 0x80, 0x00, 0x00, 0x80, 0x00,
    0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x80,
    0x00, 0x00, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00,
    0x80, 0x00, 0x00, 0x81, 0x00, 0x00, 0x81, 0x00,
    0x00, 0x81, 0x00, 0x00, 0x81, 0x00, 0x00, 0x81,
    0x00, 0x00, 0x81, 0x00, 0x00, 0x82, 0x00, 0x00,
    0x82, 0x00, 0x00, 0x82, 0x00, 0x00, 0x82, 0x00,
    0x00, 0x82, 0x00, 0x00, 0x83, 0x00, 0x00, 0x83,
    0x00, 0x00, 0x83, 0x00, 0x00, 0x83, 0x00, 0x00,
    0x83, 0x00, 0x00, 0x84, 0x00, 0x00, 0x84, 0x00,
    0x00, 0x84, 0x00, 0x00, 0x84, 0x00, 0x00, 0x84,
    0x00, 0x00, 0x84, 0x00, 0x00, 0x85, 0x00, 0x00,
    0x85, 0x00, 0x00, 0x85, 0x00, 0x00, 0x85, 0x00,
    0x00, 0x85, 0x00, 0x00, 0x86, 0x00, 0x00, 0x86,
    0x00, 0x00, 0x86, 0x00, 0x00, 0x86, 0x00, 0x00,
    0x86, 0x00, 0x00, 0x86, 0x00, 0x00, 0x87, 0x00,
    0x00, 0x87, 0x00, 0x00, 0x87, 0x00, 0x00, 0x87,
    0x00, 0x00, 0x87, 0x00, 0x00, 0x88, 0x00, 0x00,
    0x88, 0x00, 0x00, 0x88, 0x00, 0x00, 0x88, 0x00,
    0x00, 0x88, 0x00, 0x00, 0x88, 0x00, 0x00, 0x89,
    0x00, 0x00, 0x89, 0x00, 0x00, 0x89, 0x00, 0x00,
    0x89, 0x00, 0x00, 0x89, 0x00, 0x00, 0x8A, 0x00,
    0x00, 0x8A, 0x00, 0x00, 0x8A, 0x00, 0x00, 0x8A,
    0x00, 0x00, 0x8A, 0x00, 0x00, 0x8B, 0x00, 0x00,
    0x8B, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x8B, 0x00,
    0x00, 0x8B, 0x00, 0x00, 0x8B, 0x00, 0x00, 0x8C,
    0x00, 0x00, 0x8C, 0x00, 0x00, 0x8C, 0x00, 0x00,
    0x8C, 0x00, 0x00, 0x8C, 0x00, 0x00, 0x8D, 0x00,
    0x00, 0x8D, 0x00, 0x00, 0x8D, 0x00, 0x00, 0x8D,
    0x00, 0x00, 0x8D, 0x00, 0x00, 0x8D, 0x00, 0x00,
    0x8E, 0x00, 0x00, 0x8E, 0x00, 0x00, 0x8E, 0x00,
    0x00, 0x8E, 0x00, 0x00, 0x8E, 0x00, 0x00, 0x8F,
    0x00, 0x00, 0x8F, 0x00, 0x00, 0x8F, 0x00, 0x00,
    0x8F, 0x00, 0x00, 0x8F, 0x00, 0x00, 0x90, 0x00,
    0x00, 0x90, 0x00, 0x00, 0x90, 0x00, 0x00, 0x90,
    0x00, 0x00, 0x90, 0x00, 0x00, 0x90, 0x00, 0x00,
    0x91, 0x00, 0x00, 0x91, 0x00, 0x00, 0x91, 0x00,
    0x00, 0x91, 0x00, 0x00, 0x91, 0x00, 0x00, 0x92,
    0x00, 0x00, 0x92, 0x00, 0x00, 0x92, 0x00, 0x00,
    0x92, 0x00, 0x00, 0x92, 0x00, 0x00, 0x92, 0x00,
    0x00, 0x93, 0x00, 0x00, 0x93, 0x00, 0x00, 0x93,
    0x00, 0x00, 0x93, 0x00, 0x00, 0x93, 0x00, 0x00,
    0x94, 0x00, 0x00, 0x94, 0x00, 0x00, 0x94, 0x00,
    0x00, 0x94, 0x00, 0x00, 0x94, 0x00, 0x00, 0x94,
    0x00, 0x00, 0x95, 0x00, 0x00, 0x95, 0x00, 0x00,
    0x95, 0x00, 0x00, 0x95, 0x00, 0x00, 0x95, 0x00,
    0x00, 0x96, 0x00, 0x00, 0x96, 0x00, 0x00, 0x96,
    0x00, 0x00, 0x96, 0x00, 0x00, 0x96, 0x00, 0x00,
    0x97, 0x00, 0x00, 0x97, 0x00, 0x00, 0x97, 0x00,
    0x00, 0x97, 0x00, 0x00, 0x97, 0x00, 0x00, 0x97,
    0x00, 0x00, 0x98, 0x00, 0x00, 0x98, 0x00, 0x00,
    0x98, 0x00, 0x00, 0x98, 0x00, 0x00, 0x98, 0x00,
    0x00, 0x99, 0x00, 0x00, 0x99, 0x00, 0x00, 0x99,
    0x00, 0x00, 0x99, 0x00, 0x00, 0x99, 0x00, 0x00,
    0x99, 0x00, 0x00, 0x9A, 0x00, 0x00, 0x9A, 0x00,
    0x00, 0x9A, 0x00, 0x00, 0x9A, 0x00, 0x00, 0x9A,
    0x00, 0x00, 0x9B, 0x00, 0x00, 0x9B, 0x00, 0x00,
    0x9B, 0x00, 0x00, 0x9B, 0x00, 0x00, 0x9B, 0x00,
    0x00, 0x9C, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x9C,
    0x00, 0x00, 0x9C, 0x00, 0x00, 0x9C, 0x00, 0x00,
    0x9C, 0x00, 0x00, 0x9D, 0x00, 0x00, 0x9D, 0x00,
    0x00, 0x9D, 0x00, 0x00, 0x9D, 0x00, 0x00, 0x9D,
    0x00, 0x00, 0x9E, 0x00, 0x00, 0x9E, 0x00, 0x00,
    0x9E, 0x00, 0x00, 0x9E, 0x00, 0x00, 0x9E, 0x00,
    0x00, 0x9E, 0x00, 0x00, 0x9F, 0x00, 0x00, 0x9F,
    0x00, 0x00, 0x9F, 0x00, 0x00, 0x9F, 0x00, 0x00,
    0x9F, 0x00, 0x00, 0xA0, 0x00, 0x00, 0xA0, 0x00,
    0x00, 0xA0, 0x00, 0x00, 0xA0, 0x00, 0x00, 0xA0,
    0x00, 0x00, 0xA0, 0x00, 0x00, 0xA0, 0x00, 0x00,
    0xA1, 0x00, 0x00, 0xA1, 0x00, 0x00, 0xA1, 0x00,
    0x00, 0xA1, 0x00, 0x00, 0xA1, 0x00, 0x00, 0xA1,
    0x00, 0x00, 0xA2, 0x00, 0x00, 0xA2, 0x00, 0x00,
    0xA2, 0x00, 0x00, 0xA2, 0x00, 0x00, 0xA2, 0x00,
    0x00, 0xA3, 0x00, 0x00, 0xA3, 0x00, 0x00, 0xA3,
    0x00, 0x00, 0xA3, 0x00, 0x00, 0xA3, 0x00, 0x00,
    0xA3, 0x00, 0x00, 0xA4, 0x00, 0x00, 0xA4, 0x00,
    0x00, 0xA4, 0x00, 0x00, 0xA4, 0x00, 0x00, 0xA4,
    0x00, 0x00, 0xA4, 0x00, 0x00, 0xA5, 0x00, 0x00,
    0xA5, 0x00, 0x00, 0xA5, 0x00, 0x00, 0xA5, 0x00,
    0x00, 0xA5, 0x00, 0x00, 0xA5, 0x00, 0x00, 0xA6,
    0x00, 0x00, 0xA6, 0x00, 0x00, 0xA6, 0x00, 0x00,
    0xA6, 0x00, 0x00, 0xA6, 0x00, 0x00, 0xA7, 0x00,
    0x00, 0xA7, 0x00, 0x00, 0xA7, 0x00, 0x00, 0xA7,
    0x00, 0x00, 0xA7, 0x00, 0x00, 0xA7, 0x00, 0x00,
    0xA8, 0x00, 0x00, 0xA8, 0x00, 0x00, 0xA8, 0x00,
    0x00, 0xA8, 0x00, 0x00, 0xA8, 0x00, 0x00, 0xA8,
    0x00, 0x00, 0xA9, 0x00, 0x00, 0xA9, 0x00, 0x00,
    0xA9, 0x00, 0x00, 0xA9, 0x00, 0x00, 0xA9, 0x00,
    0x00, 0xAA, 0x00, 0x00, 0xAA, 0x00, 0x00, 0xAA,
    0x00, 0x00, 0xAA, 0x00, 0x00, 0xAA, 0x00, 0x00,
    0xAA, 0x00, 0x00, 0xAB, 0x00, 0x00, 0xAB, 0x00,
    0x00, 0xAB, 0x00, 0x00, 0xAB, 0x00, 0x00, 0xAB,
    0x00, 0x00, 0xAB, 0x00, 0x00, 0xAC, 0x00, 0x00,
    0xAC, 0x00, 0x00, 0xAC, 0x00, 0x00, 0xAC, 0x00,
    0x00, 0xAC, 0x00, 0x00, 0xAC, 0x00, 0x00, 0xAD,
    0x00, 0x00, 0xAD, 0x00, 0x00, 0xAD, 0x00, 0x00,
    0xAD, 0x00, 0x00, 0xAD, 0x00, 0x00, 0xAE, 0x00,
    0x00, 0xAE, 0x00, 0x00, 0xAE, 0x00, 0x00, 0xAE,
    0x00, 0x00, 0xAE, 0x00, 0x00, 0xAE, 0x00, 0x00,
    0xAF, 0x00, 0x00, 0xAF, 0x00, 0x00, 0xAF, 0x00,
    0x00, 0xAF, 0x00, 0x00, 0xAF, 0x00, 0x00, 0xAF,
    0x00, 0x00, 0xB0, 0x00, 0x00, 0xB0, 0x00, 0x00,
    0xB0, 0x00, 0x00, 0xB0, 0x00, 0x00, 0xB0, 0x00,
    0x00, 0xB0, 0x00, 0x00, 0xB1, 0x00, 0x00, 0xB1,
    0x00, 0x00, 0xB1, 0x00, 0x00, 0xB1, 0x00, 0x00,
    0xB1, 0x00, 0x00, 0xB2, 0x00, 0x00, 0xB2, 0x00,
    0x00, 0xB2, 0x00, 0x00, 0xB2, 0x00, 0x00, 0xB2,
    0x00, 0x00, 0xB2, 0x00, 0x00, 0xB3, 0x00, 0x00,
    0xB3, 0x00, 0x00, 0xB3, 0x00, 0x00, 0xB3, 0x00,
    0x00, 0xB3, 0x00, 0x00, 0xB3, 0x00, 0x00, 0xB4,
    0x00, 0x00, 0xB4, 0x00, 0x00, 0xB4, 0x00, 0x00,
    0xB4, 0x00, 0x00, 0xB4, 0x00, 0x00, 0xB5, 0x00,
    0x00, 0xB5, 0x00, 0x00, 0xB5, 0x00, 0x00, 0xB5,
    0x00, 0x00, 0xB5, 0x00, 0x00, 0xB5, 0x00, 0x00,
    0xB6, 0x00, 0x00, 0xB6, 0x00, 0x00, 0xB6, 0x00,
    0x00, 0xB6, 0x00, 0x00, 0xB6, 0x00, 0x00, 0xB6,
    0x00, 0x00, 0xB7, 0x00, 0x00, 0xB7, 0x00, 0x00,
    0xB7, 0x00, 0x00, 0xB7, 0x00, 0x00, 0xB7, 0x00,
    0x00, 0xB7, 0x00, 0x00, 0xB8, 0x00, 0x00, 0xB8,
    0x00, 0x00, 0xB8, 0x00, 0x00, 0xB8, 0x00, 0x00,
    0xB8, 0x00, 0x00, 0xB9, 0x00, 0x00, 0xB9, 0x00,
    0x00, 0xB9, 0x00, 0x00, 0xB9, 0x00, 0x00, 0xB9,
    0x00, 0x00, 0xB9, 0x00, 0x00, 0xBA, 0x00, 0x00,
    0xBA, 0x00, 0x00, 0xBA, 0x00, 0x00, 0xBA, 0x00,
    0x00, 0xBA, 0x00, 0x00, 0xBA, 0x00, 0x00, 0xBB,
    0x00, 0x00, 0xBB, 0x00, 0x00, 0xBB, 0x00, 0x00,
    0xBB, 0x00, 0x00, 0xBB, 0x00, 0x00, 0xBB, 0x00,
    0x00, 0xBC, 0x00, 0x00, 0xBC, 0x00, 0x00, 0xBC,
    0x00, 0x00, 0xBC, 0x00, 0x00, 0xBC, 0x00, 0x00,
    0xBD, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xBD, 0x00,
    0x00, 0xBD, 0x00, 0x00, 0xBD, 0x00, 0x00, 0xBD,
    0x00, 0x00, 0xBE, 0x00, 0x00, 0xBE, 0x00, 0x00,
    0xBE, 0x00, 0x00, 0xBE, 0x00, 0x00, 0xBE, 0x00,
    0x00, 0xBE, 0x00, 0x00, 0xBF, 0x00, 0x00, 0xBF,
    0x00, 0x00, 0xBF, 0x00, 0x00, 0xBF, 0x00, 0x00,
    0xBF, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xC0, 0x00,
};

// This function does any needed initialization on the rendering
// context. 
void SetupRC(void)
{
    // Background
    glClearColor(0.2f, 0.2f, 0.2f, 1.0f );

    glEnable(GL_DEPTH_TEST);
    glEnable(GL_MULTISAMPLE);
    glEnable(GL_SMOOTH);
    glEnable( GL_ALPHA_TEST ); 
    viewFrame.MoveForward(-30.0f); // move ahead
    viewFrame.MoveUp(-50.0f);   //look down
    viewFrame.MoveRight(90.0f); 
    viewFrame.RotateWorld(m3dDegToRad(5.5f) , 1.0f, 0.0f, 0.0f);
    viewFrame.RotateWorld(m3dDegToRad(8.5f) , 0.0f, -1.0f, 0.0f);
    grassShader = gltLoadShaderPairWithAttributes("Grass.vs", "Grass.fs",
                                                        2,
                                                        GLT_ATTRIBUTE_VERTEX, "vVertex", GLT_ATTRIBUTE_TEXTURE0, "Vertexd");
    locMVP = glGetUniformLocation(grassShader, "mvpMatrix");

    glUseProgram(grassShader);
    glUniform1i(glGetUniformLocation(grassShader, "length_texture"), 0);
    glUniform1i(glGetUniformLocation(grassShader, "orientation_texture"), 1);
    glUniform1i(glGetUniformLocation(grassShader, "grasspalette_texture"), 2);
    glUniform1i(glGetUniformLocation(grassShader, "grasscolor_texture"), 3);
    //glUniform1i(glGetUniformLocation(grassShader, "bend_texture"), 4);
  
    //Model
    static const GLfloat grass_blade[] =
    {
        -0.1f, 0.0f, 
         0.1f, 0.0f,
        -0.07f, 2.4f,
         0.07f, 2.4f,
        -0.07f, 4.8f,
         0.07f, 4.8f,
        -0.07f, 6.1f,
         0.02f, 6.2f
    };


    // Greate a vertex array object and a vertex buffer for the quad
    // including position and texture coordinates
  
    glGenVertexArrays(1, &vao2);
    glBindVertexArray(vao2);
    glGenBuffers(1, &vertexBuffer);
    glBindBuffer(GL_ARRAY_BUFFER, vertexBuffer);
    glBufferData(GL_ARRAY_BUFFER, sizeof(grass_blade), grass_blade, GL_STATIC_DRAW);
    glVertexAttribPointer(GLT_ATTRIBUTE_VERTEX, 2, GL_FLOAT, GL_FALSE, 0, NULL);
    glEnableVertexAttribArray(GLT_ATTRIBUTE_VERTEX);

    // Textures
    glGenTextures(1, &length_texture);
    glBindTexture(GL_TEXTURE_2D, length_texture);
    GLint w, h, c;
    GLenum f;
    void * bits = gltReadTGABits("length.tga", &w, &h, &c, &f);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RED, w, h, 0, GL_BGR, GL_UNSIGNED_BYTE, bits);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    free(bits);

    glGenTextures(1, &orientation_texture);
    glActiveTexture(GL_TEXTURE1);
    glBindTexture(GL_TEXTURE_2D, orientation_texture);
    bits = gltReadTGABits("orientation.tga", &w, &h, &c, &f);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RED, w, h, 0, GL_BGR, GL_UNSIGNED_BYTE, bits);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    free(bits);

    glGenTextures(1, &grasspalette_texture);
    glActiveTexture(GL_TEXTURE2);
    glBindTexture(GL_TEXTURE_1D, grasspalette_texture);
    glTexImage1D(GL_TEXTURE_1D, 0, GL_RGB8, 1024, 0, GL_RGB, GL_UNSIGNED_BYTE, grasspalette_data);
    glTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_1D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);

    glGenTextures(1, &grasscolor_texture);
    glActiveTexture(GL_TEXTURE3);
    glBindTexture(GL_TEXTURE_2D, grasscolor_texture);
    bits = gltReadTGABits("color.tga", &w, &h, &c, &f);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_RED, w, h, 0, GL_BGR, GL_UNSIGNED_BYTE, bits);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
    free(bits);

}

//-------------------------------------------------------------------------
// Calculates the frames per second
//-------------------------------------------------------------------------
void calculateFPS()
{
    //  Increase frame count
    frameCount++;
 
    //  Get the number of milliseconds since glutInit called
    //  (or first call to glutGet(GLUT ELAPSED TIME)).
    double currentTime = glutGet(GLUT_ELAPSED_TIME);
 
    //  Calculate time passed
    float timeInterval = currentTime - previousTime;
 
    if(timeInterval > 1000)
    {
        //  calculate the number of frames per second
        fps = frameCount / (timeInterval / 1000.0f);
 
        //  Set time
        previousTime = currentTime;
 
        //  Reset frame count
        frameCount = 0;
    }
   printf("Blade count : %d FPS : %f\n",field*field , fps);
}


void GetOGLMousePos(GLint x, GLint y)
{
 
    GLint viewport[4];
    GLdouble modelview[16];
    GLdouble projection[16];
    GLfloat winX, winY, winZ;
    GLdouble posX, posY, posZ;
 
    glGetDoublev( GL_MODELVIEW_MATRIX, modelview );
    glGetDoublev( GL_PROJECTION_MATRIX, projection );
    glGetIntegerv( GL_VIEWPORT, viewport );
 
    winX = (float)x;
    winY = (float)viewport[3] - (float)y;
    glReadPixels( x, int(winY), 1, 1, GL_DEPTH_COMPONENT, GL_FLOAT, &winZ );
 
    gluUnProject( winX, winY, winZ, modelview, projection, viewport, &posX, &posY, &posZ);
 
    //return CVector3(posX, posY, posZ);
    mpos[0] = posX;
    mpos[1] = posY;
    mpos[2] = posZ;

}


// Cleanup
void ShutdownRC(void)
{
    glDeleteBuffers(1, &vertexBuffer);
    glDeleteVertexArrays(1, &vao2);
}

// Called to draw scene
void RenderScene(void)
{
    //static CStopWatch rotTimer;

    // Clear the window and the depth buffer
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    modelViewMatrix.PushMatrix(viewFrame);
    modelViewMatrix.Translate(90.0, -15.0f, 600.0f);
    
    glUseProgram(grassShader);
    glUniformMatrix4fv(locMVP, 1, GL_FALSE, transformPipeline.GetModelViewProjectionMatrix()); 
    glUniform1f(glGetUniformLocation(grassShader,"time"),glutGet(GLUT_ELAPSED_TIME)/1000);
    viewFrame.GetOrigin(vOrigin);
    glUniform3f(glGetUniformLocation(grassShader, "eyepos"),vOrigin[0],vOrigin[1],vOrigin[2]);  
    glUniform1f(glGetUniformLocation(grassShader,"heightscale"),glen);
    GetOGLMousePos(mousex, mousey);  
    glUniform3f(glGetUniformLocation(grassShader, "hover1"),1.5*path[0]-110,path[1],path[2]-60); 
    glUniform3f(glGetUniformLocation(grassShader, "hover2"),1*movex-90,path[1],movey-40);
    //printf("x=%f y=%f z=%f",mpos[0],mpos[2],mpos[1]);
    glUniform4f(glGetUniformLocation(grassShader, "wind"),.5 - 2*mpos[0],2*mpos[2],.5 - 2*mpos[1],0.0); 
    //glBindVertexArray(vao1);
    glBindVertexArray(vao2);
    glDrawArraysInstancedARB(GL_TRIANGLE_STRIP, 0, 8, field * field);

    modelViewMatrix.PopMatrix();
    glFlush();
    glutSwapBuffers();
    glutPostRedisplay();
}

void ChangeSize(int w, int h)
{
    // Prevent a divide by zero
    if(h == 0)
        h = 1;

    // Set Viewport to window dimensions
    glViewport(0, 0, w, h);

    viewFrustum.SetPerspective(5.0f, float(w)/float(h), 1.0f, 0.0f);  
    projectionMatrix.LoadMatrix(viewFrustum.GetProjectionMatrix());
    transformPipeline.SetMatrixStacks(modelViewMatrix, projectionMatrix);
}

// Respond to arrow keys by moving the camera frame of reference
void SpecialKeys(int key, int x, int y)
{
    float angular = float(m3dDegToRad(.5f));
    float angular1 = float(m3dDegToRad(.5f)); 
    if(key == GLUT_KEY_DOWN)
        viewFrame.RotateWorld(angular1, 1.0f, 0.0f, 0.0f);

    if(key == GLUT_KEY_UP)
        viewFrame.RotateWorld(-angular1, 1.0f, 0.0f, 0.0f);

    if(key == GLUT_KEY_RIGHT)
        viewFrame.RotateWorld(angular, 0.0f, 1.0f, 0.0f);

    if(key == GLUT_KEY_LEFT)
        viewFrame.RotateWorld(-angular, 0.0f, 1.0f, 0.0f);  
}

void KeyPress(unsigned char key, int x, int y)
{
    float movement = 1;

    if( key == 'l')
        glen -= 0.01;

    if( key == 'L')
        glen += 0.01;

    if( key == 'w' ||  key == 'W')
        movey +=movement;

    if( key == 's' || key == 'S')
        movey -=movement;

    if( key == 'a'|| key == 'A')
        movex +=movement;

    if( key == 'd' || key == 'D')
        movex -=movement;

    if( key == 'M' || key == 'm')
       X = 1-X ; 

    if( key == '+')
       field++;

    if( key == '-')
       field--;

    if ( key == 27 || key == 'q' || key == 'Q' )        // quit requested
        exit ( 0 );

}

// mouse
// The GLUT mouse function
void mouse(int button, int state, int x, int y)
{
   // Save the left button state
   if (button == GLUT_LEFT_BUTTON)
   {
      mousex = x;
      mousey = y;    
      mouseleftdown = (state == GLUT_DOWN);
      glutPostRedisplay();  // Left button has changed; redisplay!
   }

   // Save the mouse position

}

void    animate ()
{
   if(X==1){
      	double dx = s*(y-x);
      	double dy = x*(r-z)-y;
      	double dz = x*y - b*z;
      	x += dt*dx;
      	y += dt*dy;
      	z += dt*dz;
	path[0] = x;
	path[1] = y;
	path[2] = z;


   }
   //  Calculate FPS
     calculateFPS();
     glutPostRedisplay ();

 
}



///////////////////////////////////////////////////////////////////////////////
// Main entry point for GLUT based programs
int main(int argc, char* argv[])
{
    gltSetWorkingDirectory(argv[0]);
 
    glutInit(&argc, argv);
    glutInitContextVersion(3, 2);
    glutInitContextProfile(GLUT_CORE_PROFILE);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH | GLUT_STENCIL | GLUT_MULTISAMPLE);
    w = 1200 ; h = 760;
    glutInitWindowSize(w, h);
    glutCreateWindow("Grass- Tushar");
    glutDisplayFunc(RenderScene);
    glutKeyboardFunc(KeyPress);
    glutSpecialFunc(SpecialKeys); 
    glutReshapeFunc(ChangeSize);
    //glutKeyboardFunc(Keyboard);  
    glutMouseFunc(mouse);
    glutIdleFunc          ( animate    );
   //glutMotionFunc(motion);
    glewExperimental = GL_TRUE; 
    GLenum err = glewInit();
    if (GLEW_OK != err) {
        fprintf(stderr, "GLEW Error: %s\n", glewGetErrorString(err));
        return 1;
    }

    SetupRC();
    glutMainLoop();
    ShutdownRC();

    return 0;
}
